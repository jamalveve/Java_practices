1)access specifier in java
*****************************

In Java, access specifiers (also known as access modifiers) determine the visibility or accessibility of classes, methods, and variables. There are four main types of access specifiers in Java:

Public:
^^^^^^^^^^^^

Syntax: public
Visibility: Accessible from any other class in any package.
Example:
java

public class MyClass {
    public int myPublicVar;
public void myPublicMethod() {
        // method implementation
    }
}
Private:
^^^^^^^^^^^^^

Syntax: private
Visibility: Accessible only within the class it is declared. Not visible to any other class.
Example:
java

public class MyClass {
    private int myPrivateVar;
    private void myPrivateMethod() {
        // method implementation
    }
}
Protected:
^^^^^^^^^^^^^^

Syntax: protected
Visibility: Accessible within the same package and by subclasses (even if they are in different packages).
Example:
java

public class MyClass {
    protected int myProtectedVar;
    protected void myProtectedMethod() {
        // method implementation
    }
}
Default (Package-Private):
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Syntax: No specifier (just leave it empty)
Visibility: Accessible only within the same package. Not visible to classes in other packages.
Example:
java

class MyClass {  // default access modifier
    int myDefaultVar;  // default access
    void myDefaultMethod() {
        // method implementation
    }
}
Summary of Access Specifiers:
Access Specifier	SameClass	subclass/diffclass(SamePackage)    Subclasss (Different Package)	class(Other Packages)
public	                  Yes	            Yes	                            Yes	                                       Yes
protected	          Yes	            Yes	                            no       (doubt)                                   No
default	Yes	Yes	No	No
private	Yes	No	No	No
Usage Considerations:
Use public for methods and variables that need to be accessed from anywhere.
Use private to encapsulate data and restrict access to the internal workings of a class.
Use protected when you want to allow subclasses to access certain members.
Use default for classes and members that should only be accessible within the same package.
These access specifiers help in maintaining encapsulation and controlling access to the components of a class, which is a fundamental principle of object-oriented programming.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

2)types of method
**********************

In Java, methods can be categorized based on various criteria. Here are the main types of methods:

1. Based on Return Type
**************************
Void Method: Does not return any value.

java

public void display() {
    System.out.println("Hello, World!");
}
Return Method: Returns a value of a specified type.

java

public int add(int a, int b) {
    return a + b;
}
2. Based on Parameters
*************************
Parameterized Method: Takes parameters as input.

java

public void greet(String name) {
    System.out.println("Hello, " + name);
}
Non-Parameterized Method: Does not take any parameters.

java

public void sayHello() {
    System.out.println("Hello!");
}
3. Based on Method Declaration
*********************************
Static Method: Belongs to the class rather than instances of the class. Can be called without creating an object of the class.

java

public static void staticMethod() {
    System.out.println("This is a static method.");
}
Instance Method: Requires an instance of the class to be invoked. It can access instance variables and instance methods.

java

public void instanceMethod() {
    System.out.println("This is an instance method.");
}
4. Based on Accessibility
*******************************
Public Method: Accessible from any other class.

java

public void publicMethod() {
    System.out.println("This is a public method.");
}
Private Method: Accessible only within the class.

java

private void privateMethod() {
    System.out.println("This is a private method.");
}
Protected Method: Accessible within the same package and subclasses.

java

protected void protectedMethod() {
    System.out.println("This is a protected method.");
}
Default Method (Package-Private): Accessible only within the same package. It is declared without any access modifier.

java

void defaultMethod() {
    System.out.println("This is a default method.");
}
5. Special Types of Methods
**************************
Abstract Method: Declared without an implementation. Must be overridden in a subclass. It is declared within an abstract class or interface.


abstract void abstractMethod();
Final Method: Cannot be overridden by subclasses.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

java

public final void finalMethod() {
    System.out.println("This is a final method.");
}
Synchronized Method: Used in multi-threading. Only one thread can access it at a time.
^^^^^^^^^^^^^^^^^^^^^

java

public synchronized void synchronizedMethod() {
    // synchronized code
}
Native Method: A method that is implemented in native code using JNI (Java Native Interface).
^^^^^^^^^^^^^^^^^^^^

java

public native void nativeMethod();
Default Method (in Interfaces): Introduced in Java 8, allows you to define a method in an interface with a body.

java

public interface MyInterface {
    default void defaultMethod() {
        System.out.println("This is a default method in an interface.");
    }
}
Summary
Understanding the different types of methods helps in organizing code effectively, managing access, and enhancing functionality in Java programming. Each type serves specific purposes in application development, allowing for better design and maintenance.
---------------------------------------------------------------------------------------------------------------------------------------------------
3)userdefined and predefined method
*************************************

In Java, methods can be categorized into two main types: user-defined methods and predefined methods. Hereâ€™s a detailed explanation of both:

1. User-Defined Methods
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^6
User-defined methods are those that you create to perform specific tasks in your program. They allow you to encapsulate code for reuse, improve organization, and enhance readability. You can define your methods based on your application needs.

Characteristics:
Defined by the programmer: You write the code for these methods based on the specific functionality required.
Can be parameterized: User-defined methods can take parameters to pass values.
Can return values: They can return a value of a specified type or be void (not return any value).
Example of a User-Defined Method:
java

public class MathOperations {
    // A user-defined method that adds two integers
    public int add(int a, int b) {
        return a + b;
    }
    
    // A user-defined method that displays a greeting message
    public void greet(String name) {
        System.out.println("Hello, " + name + "!");
    }

    public static void main(String[] args) {
        MathOperations operations = new MathOperations();
        
        // Calling user-defined methods
        int sum = operations.add(5, 10);
        System.out.println("Sum: " + sum);
        
        operations.greet("Alice");
    }
}
2. Predefined Methods
^^^^^^^^^^^^^^^^^^^^^^^^^^^6
Predefined methods are those that are already provided by the Java programming language and its libraries. These methods are part of Java's built-in classes and can be used directly in your program without needing to be defined by the user.

Characteristics:
Part of Java's standard library: Predefined methods come from the Java Development Kit (JDK) and are part of Java's standard classes, such as String, Math, System, etc.
Ready to use: You can call these methods directly without having to implement them.
Extensive functionality: Predefined methods cover a wide range of operations, such as mathematical calculations, string manipulation, input/output operations, and more.
Example of Predefined Methods:
java

public class PredefinedMethodsExample {
    public static void main(String[] args) {
        // Using predefined methods from the Math class
        double squareRoot = Math.sqrt(16); // Predefined method to calculate square root
        System.out.println("Square Root: " + squareRoot);

        // Using predefined methods from the String class
        String text = "Hello, World!";
        int length = text.length(); // Predefined method to get the length of the string
        System.out.println("Length of the string: " + length);
        
        String upperCaseText = text.toUpperCase(); // Predefined method to convert to uppercase
        System.out.println("Uppercase: " + upperCaseText);
    }
}
Summary
User-Defined Methods: Created by the programmer to perform specific tasks. They help in organizing code and making it reusable.

Predefined Methods: Provided by Java's standard library and can be used directly. They offer a wide range of functionalities, making programming easier and more efficient.

Both types of methods play crucial roles in Java programming, allowing for structured and efficient code development.
============================================================================================================================================
4)method calling
***********************

In Java, method calling is the process of executing a method that has been defined either in the same class or in a different class. There are different ways to call methods depending on whether they are static or instance methods. Hereâ€™s a detailed explanation of how to call methods in Java:

1. Calling Instance Methods
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Instance methods belong to an instance of a class. To call an instance method, you need to create an object of the class first.

Example:
java

public class Calculator {
    // Instance method to add two numbers
    public int add(int a, int b) {
        return a + b;
    }
}

public class Main {
    public static void main(String[] args) {
        // Creating an object of the Calculator class
        Calculator calculator = new Calculator();
        
        // Calling the instance method using the object
        int sum = calculator.add(5, 10);
        System.out.println("Sum: " + sum); // Output: Sum: 15
    }
}
2. Calling Static Methods
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Static methods belong to the class itself rather than any specific instance. You can call a static method directly using the class name, or if you're within the same class, you can call it directly without the class name.

Example:
java

public class MathOperations {
    // Static method to multiply two numbers
    public static int multiply(int a, int b) {
        return a * b;
    }
}

public class Main {
    public static void main(String[] args) {
        // Calling the static method using the class name
        int product = MathOperations.multiply(5, 10);
        System.out.println("Product: " + product); // Output: Product: 50
    }
}
3. Calling Methods from Different Classes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
You can call methods from different classes by creating objects of the class containing the method you want to call (for instance methods) or using the class name (for static methods).

Example:
java

public class Greeting {
    // Instance method to greet a person
    public void greet(String name) {
        System.out.println("Hello, " + name + "!");
    }
}

public class Main {
    public static void main(String[] args) {
        // Creating an object of the Greeting class
        Greeting greeting = new Greeting();
        
        // Calling the instance method from a different class
        greeting.greet("Alice"); // Output: Hello, Alice!
    }
}
4. Calling Methods with Parameters and Return Values
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
When calling methods with parameters, you can pass values as arguments. If the method returns a value, you can capture that value in a variable.

Example:
java

public class Converter {
    // Method to convert Celsius to Fahrenheit
    public double celsiusToFahrenheit(double celsius) {
        return (celsius * 9/5) + 32;
    }
}

public class Main {
    public static void main(String[] args) {
        // Creating an object of the Converter class
        Converter converter = new Converter();
        
        // Calling the method with a parameter and capturing the return value
        double fahrenheit = converter.celsiusToFahrenheit(25);
        System.out.println("Fahrenheit: " + fahrenheit); // Output: Fahrenheit: 77.0
    }
}
Summary
==========
Instance Methods: Call these using an object of the class.
Static Methods: Call these using the class name or directly within the same class.
Cross-Class Calls: You can call methods from different classes by creating an object of the class or using the class name for static methods.
Parameters and Return Values: Methods can take parameters and return values, which can be captured when calling the method.
Understanding method calling is crucial for organizing your code and using object-oriented programming effectively in Java.
=====================================================================================================================================================
5)encapsulation in oops java
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Encapsulation is one of the four fundamental principles of Object-Oriented Programming (OOP) in Java, along with inheritance, polymorphism, and abstraction. It refers to the bundling of data (attributes) and methods (functions) that operate on that data into a single unit, usually a class. Additionally, it restricts direct access to some of an objectâ€™s components, which is a means of preventing unintended interference and misuse of the methods and data.

Key Aspects of Encapsulation
*****************************8
Data Hiding: By restricting access to the inner workings of a class, you protect the integrity of the data. This is typically done by declaring class variables as private and providing public methods to access or modify these variables.

Controlled Access: Encapsulation allows you to control how the data is accessed and modified. You can provide getter and setter methods to enable controlled access to private variables.

Increased Flexibility and Maintainability: Changes to the internal implementation of a class can be made without affecting other parts of the program that rely on that class. This leads to better maintainability.

Enhanced Security: By restricting access to sensitive data, encapsulation helps in protecting the data from unauthorized access and modification.

How to Implement Encapsulation in Java
To implement encapsulation in Java, follow these steps:

Declare the Variables as Private: Make the class attributes private so they cannot be accessed directly from outside the class.
Provide Public Getter and Setter Methods: Create public methods to get and set the values of the private attributes.
Example of Encapsulation in Java
java

public class BankAccount {
    // Private variables (attributes)
    private String accountNumber;
    private double balance;

    // Constructor to initialize account
    public BankAccount(String accountNumber, double initialBalance) {
        this.accountNumber = accountNumber;
        this.balance = initialBalance;
    }

    // Public method to get the account number
    public String getAccountNumber() {
        return accountNumber;
    }

    // Public method to get the balance
    public double getBalance() {
        return balance;
    }

    // Public method to deposit money
    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited: " + amount);
        } else {
            System.out.println("Deposit amount must be positive.");
        }
    }

    // Public method to withdraw money
    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrew: " + amount);
        } else {
            System.out.println("Insufficient balance or invalid amount.");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        // Creating a new BankAccount object
        BankAccount account = new BankAccount("123456789", 500.0);
        
        // Accessing the account number using the getter method
        System.out.println("Account Number: " + account.getAccountNumber());
        
        // Accessing the balance using the getter method
        System.out.println("Initial Balance: " + account.getBalance());
        
        // Depositing money
        account.deposit(150.0);
        System.out.println("Balance after deposit: " + account.getBalance());
        
        // Withdrawing money
        account.withdraw(100.0);
        System.out.println("Balance after withdrawal: " + account.getBalance());
        
        // Trying to withdraw more than the balance
        account.withdraw(600.0);
    }
}
Explanation of the Example
****************************
Private Variables: The accountNumber and balance attributes are declared as private, meaning they cannot be accessed directly from outside the BankAccount class.
Getter Methods: The getAccountNumber and getBalance methods allow external code to access the values of these private attributes.
Setter Methods (like deposit and withdraw): The methods for depositing and withdrawing money control how the balance is modified. They ensure that the operations adhere to business rules (e.g., not allowing negative deposits).
Benefits of Encapsulation
Improved Data Integrity: Prevents external classes from directly changing the internal state of an object inappropriately.
Ease of Maintenance: Changes to the encapsulated code can be made without affecting external code that uses it.
Modularity: Classes can be developed independently and combined together, leading to a more modular program structure.
In summary, encapsulation is a fundamental concept in OOP that helps protect data and promotes a clean, maintainable design in Java programs.

how encapsulation is better for unit testing
***********************************************

Encapsulation plays a significant role in improving unit testing in Java and other object-oriented programming languages. Hereâ€™s how encapsulation contributes to better unit testing:

1. Reduced Complexity
Focused Testing: With encapsulation, the internal workings of a class are hidden. This means that testers can focus on the public interface of the class (the methods that are exposed) without needing to understand the intricate details of its implementation. This reduces complexity and makes it easier to write unit tests.
2. Controlled Access to Data
Consistent State: Encapsulation allows you to control how data is accessed and modified through getter and setter methods. This means you can ensure that the object is always in a valid state, making it easier to predict the outcomes of tests.
Easier Mocking and Stubbing: By encapsulating data and behavior, you can create mock objects or stubs for unit tests more easily. This is especially useful for testing classes that depend on other classes or external systems, allowing for isolated testing.
3. Isolation of Changes
Internal Implementation Changes: Since encapsulated classes hide their internal state, you can change the implementation details without affecting other parts of the application. As long as the public interface remains the same, unit tests will continue to pass. This leads to greater confidence when refactoring code, knowing that existing tests will catch any unintended side effects.
4. Improved Testability
Dependency Injection: Encapsulation often works hand-in-hand with design patterns like Dependency Injection, which promotes the use of interfaces and abstract classes. This allows for easier replacement of dependencies with mocks or stubs during testing.
Focus on Public Methods: Unit tests can be designed to focus solely on the public methods of a class. This means that internal helper methods or private methods, which may complicate tests, do not need to be tested directly. Instead, you verify their behavior through the public methods that use them.
5. Encourages Good Design Principles
Single Responsibility Principle: Encapsulation encourages classes to have a single responsibility, which often leads to smaller, more focused classes. This makes unit testing more straightforward, as each class can be tested in isolation with fewer dependencies.
Loose Coupling: By promoting loose coupling between classes, encapsulation allows for easier testing of individual components. When classes are loosely coupled, changes in one class are less likely to affect others, which simplifies testing.
Example of Improved Unit Testing with Encapsulation
Hereâ€™s a simplified example demonstrating how encapsulation can improve unit testing:

Need for Encapsulation in Java
******************************
Better Control
Getter and Setter
Security
Flexibility

Better Control
***************
Encapsulation provides ultimate control over the data members and data methods inside the class.
Getter and Setter
******************
The standard IDEs provide in-built support for 'Getter and Setter' methods, which increases the programming pace.
Security
************
Encapsulation prevents access to data members and data methods by any external classes. The encapsulation process improves the security of the encapsulated data.
Flexibility
*************
Changes made to one part of the code can be successfully implemented without affecting any other part of the code.
java

public class BankAccount {
    private double balance;

    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
        }
    }

    public void withdraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
        }
    }
}
Unit Test for BankAccount
java

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class BankAccountTest {

    @Test
    public void testDeposit() {
        BankAccount account = new BankAccount(100);
        account.deposit(50);
        assertEquals(150, account.getBalance());
    }

    @Test
    public void testWithdraw() {
        BankAccount account = new BankAccount(100);
        account.withdraw(30);
        assertEquals(70, account.getBalance());
    }

    @Test
    public void testWithdrawInsufficientFunds() {
        BankAccount account = new BankAccount(100);
        account.withdraw(150); // should not change the balance
        assertEquals(100, account.getBalance());
    }
}
Explanation
Controlled Access: The balance is private, and all access is through the deposit and withdraw methods. This ensures that the balance can only be changed in valid ways.

Testing Public Interface: The unit tests focus on the public methods of the BankAccount class (deposit and withdraw). The implementation details of how the balance is managed are irrelevant to the tests.

Isolation: Each test case is independent and only tests the behavior of the BankAccount class. Changes to the internal implementation (like how balance is stored) would not break the tests as long as the public methods behave as expected.

Conclusion
Encapsulation enhances unit testing by simplifying the testing process, allowing for controlled data access, isolating implementation changes, and encouraging better design practices. By focusing on the public interface and internal state, developers can write more effective, maintainable, and reliable unit tests, ultimately leading to higher-quality software.

==========================================================================================================================================================================
6)Arrays
**************

arrays in Java are a fundamental data athat allows you to store multiple values of the same type in a single variable. They provide a way to manage collections of data efficiently. Hereâ€™s a comprehensive overview of arrays in Java, including their declaration, initialization, and u

comtigous memry allocation
Arrays in Java are a fundamental data structure that allows you to store multiple values of the same type in a single variable. They provide a way to manage collections of data efficiently. Hereâ€™s a comprehensive overview of arrays in Java, including their declaration, initialization, and usage.

1. Types of Arrays
Java supports two types of arrays:

Single-Dimensional Arrays: A linear list of elements.
Multi-Dimensional Arrays: Arrays of arrays, commonly used to create matrices or tables.
2. Declaring and Initializing Arrays
Single-Dimensional Arrays
Declaration:
You declare an array by specifying the type of elements it will hold, followed by square brackets.

java

int[] numbers; // Preferred way
// or
int numbers[]; // Legal but less preferred
Initialization:
You can initialize an array at the time of declaration or later using the new keyword.

java

// Initialization at the time of declaration
int[] numbers = {1, 2, 3, 4, 5};

// Declaration followed by initialization
int[] numbers = new int[5]; // Creates an array of size 5
numbers[0] = 1;
numbers[1] = 2;
numbers[2] = 3;
numbers[3] = 4;
numbers[4] = 5;
Multi-Dimensional Arrays
Multi-dimensional arrays are declared using multiple sets of square brackets.

Declaration and Initialization:
*******************************

java

// Declaration
int[][] matrix; // A 2D array

// Initialization
matrix = new int[3][3]; // 3x3 matrix

// Alternatively, you can initialize it like this:
int[][] matrix = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};
3. Accessing Array Elements
******************************
You access elements in an array using their index, which starts from 0.

java

int firstElement = numbers[0]; // Accessing the first element
int secondElement = numbers[1]; // Accessing the second element

// For multi-dimensional arrays:
int element = matrix[1][2]; // Accesse

4. Array Length
********************8
You can find the length of an array using the .length property.

java

int length = numbers.length; // Gets the length of the array
5. Example Code
*************************8
Hereâ€™s a simple example demonstrating the use of arrays in Java:

java

public class ArrayExample {
    public static void main(String[] args) {
        // Single-Dimensional Array
        int[] numbers = {1, 2, 3, 4, 5};
        
        // Accessing elements
        System.out.println("First element: " + numbers[0]); // Output: 1
        System.out.println("Length of array: " + numbers.length); // Output: 5
        
        // Looping through the array
        System.out.print("Array elements: ");
        for (int i = 0; i < numbers.length; i++) {
            System.out.print(numbers[i] + " "); // Output: 1 2 3 4 5 
        }
        
        // Multi-Dimensional Array
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        // Accessing elements in a multi-dimensional array
        System.out.println("\nElement at (1,2): " + matrix[1][2]); // Output: 6
        
        // Looping through the 2D array
        System.out.println("Matrix elements:");
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println(); // New line for each row
        }
    }
}
6. Important Points
***********************
Fixed Size: 
^^^^^^^^^^^^
Arrays in Java have a fixed size, meaning once an array is created, you cannot change its size. If you need a dynamic size, consider using ArrayList.
Default Values:
^^^^^^^^^^^^^^^^^^
 When you create an array, it is initialized with default values:
Numeric types (int, float, etc.) are initialized to 0.
char is initialized to '\u0000'.
boolean is initialized to false.

Object references are initialized to null.
7. Common Operations
************************8
Copying Arrays: You can copy an array using System.arraycopy() or by using Arrays.copyOf() method from the java.util.Arrays class.
Sorting Arrays: You can sort arrays using Arrays.sort() method from the java.util.Arrays class.
Searching Arrays: Use Arrays.binarySearch() for searching in a sorted array.
Summary
Arrays are a powerful feature in Java that provide a way to store multiple values in a single variable. They are efficient for accessing elements but have a fixed size. Understanding arrays is crucial for effective data management and manipulation in Java programming.


what is the advantage of array over list
******************************************
as we have variables to store the elements but only single element not so many at a time
as we have list to store all elements together but still y we need array?


Arrays and lists (like ArrayList in Java) are both used to store collections of data, but they have different characteristics and use cases. Here are some advantages of arrays over lists:

Advantages of Arrays over Lists
Performance:

Faster Access: Arrays provide faster access to elements due to their contiguous memory allocation. Since arrays are stored in a single block of memory, accessing elements by index is a constant-time operation (O(1)).
Lower Overhead: Arrays have less memory overhead compared to lists. An array only requires the memory for its elements, while a list (such as ArrayList) has additional overhead for its internal structure (like resizing and storing the current capacity).
Fixed Size:

Simplicity in Use: If you know the exact number of elements that you will be working with, using an array can simplify the implementation since arrays have a fixed size. You donâ€™t need to worry about dynamically resizing or managing capacity.
Memory Allocation: Arrays allow you to allocate a specific amount of memory upfront, which can be more efficient when the size is known in advance.
Better for Multidimensional Data:

Multi-Dimensional Arrays: Arrays support multi-dimensional structures more naturally. You can create arrays of arrays (e.g., 2D arrays) easily, while lists do not support multi-dimensional structures natively.
Type-Safety:

Homogeneous Types: Arrays are type-safe, meaning that they can only store elements of the specified type, which can help catch errors at compile time. For example, if you declare an int[], it will only accept integers, while a List<Object> can hold any type of objects.
Simplicity:

Simple Syntax: Arrays have a straightforward syntax for declaration and initialization, making them easier to use in simple scenarios.
No Autoboxing:

Primitive Types: Arrays can store primitive data types directly (e.g., int[], char[]), while lists store objects. This means you avoid the overhead of boxing and unboxing when using primitive types with lists (like ArrayList<Integer>).
When to Use Arrays vs. Lists
Use Arrays When:
******************

The size of the collection is known and fixed.
You require fast access to elements.
You are dealing with multi-dimensional data.
You need to store primitive types directly.
Use Lists When:
*****************

The size of the collection can change dynamically.
You require built-in methods for manipulating the collection (like adding, removing, and searching).
You need more flexible data structures that can grow or shrink as needed.
Summary
**************
While both arrays and lists have their advantages, the choice between them largely depends on your specific requirements, such as performance, memory management, and ease of use. Arrays are advantageous for performance and simplicity when working with fixed-size collections, while lists are more flexible and feature-rich for dynamic collections.



Get smarter responses, upload files and images, and more.

1. Parsing Arrays
*******************************
Parsing an array generally refers to the process of interpreting or processing the contents of an array, often to convert data from one format to another or to analyze its elements. In Java, parsing an array can involve iterating through its elements, converting them from one data type to another, or performing operations based on the array's contents.

Hereâ€™s how you can parse an array in different contexts in Java:

Ex Parsing String Arrays
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If you have an array of strings that need to be converted into another type (e.g., integers), you can parse each string element individually.

Example1: Parsing a String Array to Integers
java

public class ArrayParsingExample {
    public static void main(String[] args) {
        // Sample string array
        String[] stringArray = {"1", "2", "3", "4", "5"};
// Array to hold parsed integers
        int[] intArray = new int[stringArray.length];

        // Parsing each string to an integer
        for (int i = 0; i < stringArray.length; i++) {
            intArray[i] = Integer.parseInt(stringArray[i]);
        }

        // Printing the parsed integers
        System.out.print("Parsed integers: ");
        for (int num : intArray) {
   System.out.print(num + " "); // Output: 1 2 3 4 5 
        }
    }
}
example2. Parsing a JSON Array
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If you receive a JSON array and want to parse it into a Java array, you can use a library like org.json or Gson. Below is an example using the org.json library.

Example: Parsing a JSON Array
java

import org.json.JSONArray;

public class JsonArrayParsing {
    public static void main(String[] args) {
        // Sample JSON array
        String jsonArrayString = "[\"apple\", \"banana\", \"cherry\"]";

        // Parsing JSON array
        JSONArray jsonArray = new JSONArray(jsonArrayString);
        String[] fruits = new String[jsonArray.length()];

        // Extracting elements from JSON array
        for (int i = 0; i < jsonArray.length(); i++) {
            fruits[i] = jsonArray.getString(i);
        }

        // Printing the parsed strings
        System.out.print("Parsed fruits: ");
        for (String fruit : fruits) {
            System.out.print(fruit + " "); // Output: apple banana cherry
        }
    }
}
3. Parsing a CSV Array
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
If you have a CSV (Comma-Separated Values) string and want to parse it into an array, you can use the String.split() method.

Example: Parsing a CSV String into an Array
java

public class CsvParsingExample {
    public static void main(String[] args) {
        // Sample CSV string
        String csv = "John,Doe,30,New York";

        // Parsing CSV into an array
        String[] values = csv.split(",");

        // Printing the parsed values
        System.out.println("Parsed CSV values:");
        for (String value : values) {
            System.out.println(value);
        }
    }
}
4. Parsing Multi-Dimensional Arrays
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
You can parse multi-dimensional arrays by iterating through each dimension.

Example: Parsing a 2D Array
java

public class MultiDimensionalArrayParsing {
    public static void main(String[] args) {
        // Sample 2D array
        int[][] matrix = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        // Parsing and printing the elements of the 2D array
        System.out.println("Parsed 2D array:");
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println(); // New line for each row
        }
    }
}

Passing Array to a Method
******************************
class Testarrayi
//creating a method which receives an array as a //parameter
static void min(int arr|IX
int min=arr[0);
for(int i=1;i<arr.length;i*+)
if(min>arr[il)
min=arr(i);
System.out.printin(min);
ons
}
public static void main(String argsIX
//declaring and initializing an array int al]=(33,3,4,5);
// passing array to method
min(a);
}}
Conclusion
Parsing an array in Java involves interpreting or converting its elements into a different format or performing operations based on its contents. You can parse arrays of strings to integers, parse JSON arrays, parse CSV strings, and even iterate through multi-dimensional arrays. Each parsing technique is suited to different scenarios based on the data format you are working with.


Read about arrayindex out of bound exception
check about 2D arrays
============================================================================================================================================================================================

8)INHERITANCE
Inheritance is a fundamental concept in Object-Oriented Programming (OOP) that allows a class (the child or subclass) to inherit properties and behaviors (methods) from another class (the parent or superclass). This promotes code reuse, enhances maintainability, and establishes a hierarchical relationship between classes.
simple:one abject acquiring the properties and fucntionalities of another object

Key Concepts of Inheritance
Superclass and Subclass:


Superclass (Parent Class): The class from which properties and methods are inherited.
Subclass (Child Class): The class that inherits from the superclass. It can also have additional properties and methods.
Types of Inheritance:
************************

Single Inheritance: A subclass inherits from one superclass.
Multilevel Inheritance: A subclass inherits from a superclass, which can also have its own subclass.
Hierarchical Inheritance: Multiple subclasses inherit from a single superclass.
Multiple Inheritance: Not directly supported in Java (a class cannot inherit from multiple classes). However, interfaces can be used to achieve similar behavior.
Method Overriding:
***************
The subclass can provide a specific implementation of a method that is already defined in its superclass. This is called method overriding.

Super Keyword:
********************
The super keyword can be used in a subclass to refer to its parent class. It can be used to access superclass methods and constructors.

Example of Inheritance in Java
Hereâ€™s a simple example to demonstrate inheritance in Java:

java

// Superclass
class Animal {
    void eat() {
        System.out.println("This animal eats food.");
    }
}

// Subclass
class Dog extends Animal {
    void bark() {
        System.out.println("The dog barks.");
    }

    // Method overriding
    @Override
    void eat() {
        System.out.println("The dog eats bones.");
    }
}

public class InheritanceExample {
    public static void main(String[] args) {
        // Creating an instance of Dog
        Dog myDog = new Dog();
        
        // Calling methods
        myDog.eat(); // Calls the overridden method in Dog
        myDog.bark(); // Calls the Dog's own method
    }
}
Explanation of the Example
Superclass (Animal): Contains a method eat() that describes general eating behavior for animals.

Subclass (Dog):

Inherits from Animal using the extends keyword.
Defines its own method bark().
Overrides the eat() method to provide specific behavior for dogs.
Main Class (InheritanceExample):

An instance of Dog is created.
Calls the overridden eat() method from the Dog class, which prints "The dog eats bones."
Calls the bark() method from the Dog class.
Output
When you run the above program, the output will be:


The dog eats bones.
The dog barks.
Advantages of Inheritance
*****************************
Code Reusability: Common functionality can be defined in a superclass and reused in multiple subclasses, reducing code duplication.

Extensibility: New functionality can be added to existing classes without modifying them, promoting the open/closed principle.

Polymorphism: Allows methods to be defined in a superclass and overridden in subclasses, enabling dynamic method resolution.

Simplified Code Maintenance: Changes made in the superclass automatically propagate to all subclasses, making maintenance easier.

Conclusion
Inheritance is a powerful feature of OOP that allows for code reuse and establishes relationships between classes. Understanding how to use inheritance effectively is key to designing robust and maintainable software systems. If you have any further questions or need clarification on any aspect of inheritance, feel free to ask!


why multiple inheritance is not possible in java
*****************************************************

Multiple inheritance, which allows a class to inherit from more than one superclass, is not supported in Java due to several reasons, primarily related to complexity and ambiguity. Here are the main reasons why Java does not allow multiple inheritance:

1. Diamond Problem
The most significant issue with multiple inheritance is the diamond problem. This occurs when a class inherits from two classes that have a method with the same signature. Here's a visual representation:

css

    Class A
     /   \
    B     C
     \   /
      D
In this case, class D inherits from both classes B and C, which in turn inherit from class A. If class A has a method show(), and both B and C override this method, it becomes ambiguous which show() method D should inherit.

Java avoids this ambiguity by not allowing a class to extend more than one class, ensuring a clear and well-defined inheritance structure.

2. Increased Complexity
Allowing multiple inheritance increases the complexity of the class hierarchy. This can make the system harder to understand, maintain, and debug. When a class has multiple superclasses, it can be challenging to track which superclass provides which method or property.

3. Simplicity and Clarity
Java was designed with simplicity and clarity in mind. By restricting inheritance to single inheritance (with the use of interfaces for achieving similar functionality), Java keeps the object-oriented model straightforward. This reduces the potential for programming errors and confusion in understanding the relationships between classes.

4. Interfaces as an Alternative
Java provides interfaces to achieve a form of multiple inheritance. An interface is a reference type in Java that can contain only constants, method signatures, default methods, static methods, and nested types. A class can implement multiple interfaces, which allows it to inherit behavior from multiple sources without the complications of multiple inheritance.

Example of Using Interfaces
java

interface CanFly {
    void fly();
}

interface CanSwim {
    void swim();
}

class Duck implements CanFly, CanSwim {
    public void fly() {
        System.out.println("Duck can fly.");
    }

    public void swim() {
        System.out.println("Duck can swim.");
    }
}

public class Main {
    public static void main(String[] args) {
        Duck myDuck = new Duck();
        myDuck.fly(); // Output: Duck can fly.
        myDuck.swim(); // Output: Duck can swim.
    }
}
In this example, the Duck class implements both CanFly and CanSwim interfaces, allowing it to inherit behavior from multiple sources without the ambiguity of multiple inheritance.

Conclusion
Java does not support multiple inheritance to avoid the complexities and ambiguities associated with it, such as the diamond problem. Instead, it provides interfaces as a flexible and efficient alternative, allowing classes to inherit behavior from multiple sources while maintaining clarity and simplicity in the design. This design decision helps keep Java's object-oriented model straightforward and manageable.

==============================================================================================================================
7)Key Differences Between WHILE and DO-WHILELoops
***************************************************
Feature   	        while Loop	                      do-while Loop
Condition Check	   Before the loop body execution	After the loop body execution
Minimum Execution  May not execute at all 
                  (if condition is false initially)	Executes at least once
Syntax	           while (condition) { ... }	         do { ... } while (condition);


While Loop: Use when the number of iterations is not known beforehand and you want to check the condition before executing the loop body.

Do-While Loop: Use when you need to ensure that the loop body executes at least once, 
such as when prompting user input where you want to validate it after the first attempt.

Conclusion
Both while and do-while loops are valuable constructs in Java for controlling the flow of execution based on conditions. Choosing between them depends on the specific requirements of your program. If you need the loop to run at least once, use do-while; otherwise, if you want to check the condition before each iteration, use while.


=======================================================================================================================================================
9)POLYMORPHYSM
*************
 is one of the four fundamental principles of Object-Oriented Programming (OOP), alongside encapsulation, inheritance, and abstraction. The term polymorphism means "many forms," and it allows objects to be treated as instances of their parent class, even if they are actually instances of a derived class. This capability enhances flexibility and the ability to extend code in OOP.

Types of Polymorphism in Java
Java supports two main types of polymorphism:

Compile-time Polymorphism (Static Binding)
Run-time Polymorphism (Dynamic Binding)
1. Compile-time Polymorphism (Static Binding)
This type of polymorphism is achieved through method overloading and operator overloading (though operator overloading is not supported in Java).

Method Overloading
Method overloading occurs when two or more methods in the same class have the same name but different parameters (different type, number, or both).

Example:

java

class MathOperations {
    // Method to add two integers
    int add(int a, int b) {
        return a + b;
    }

    // Method to add three integers
    int add(int a, int b, int c) {
        return a + b + c;
    }

    // Method to add two double values
    double add(double a, double b) {
        return a + b;
    }
}

public class CompileTimePolymorphism {
    public static void main(String[] args) {
        MathOperations math = new MathOperations();
        
        System.out.println("Sum of 2 and 3: " + math.add(2, 3)); // Calls the first method
        System.out.println("Sum of 2, 3, and 4: " + math.add(2, 3, 4)); // Calls the second method
        System.out.println("Sum of 2.5 and 3.5: " + math.add(2.5, 3.5)); // Calls the third method
    }
}
2. Run-time Polymorphism (Dynamic Binding)
Run-time polymorphism is achieved through method overriding, where a subclass provides a specific implementation of a method already defined in its superclass. The method that is invoked is determined at runtime based on the object type.

Example:

java

class Animal {
    void sound() {
        System.out.println("Animal makes a sound");
    }
}

class Dog extends Animal {
    void sound() {
        System.out.println("Dog barks");
    }
}

class Cat extends Animal {
    void sound() {
        System.out.println("Cat meows");
    }
}

public class RuntimePolymorphism {
    public static void main(String[] args) {
        Animal myAnimal;

        // Pointing to a Dog object
        myAnimal = new Dog();
        myAnimal.sound(); // Output: Dog barks

        // Pointing to a Cat object
        myAnimal = new Cat();
        myAnimal.sound(); // Output: Cat meows
    }
}
Key Points
Flexibility: Polymorphism provides flexibility in code, allowing for easier code maintenance and extension. New classes can be added with minimal changes to existing code.

Dynamic Method Dispatch: In run-time polymorphism, method calls are resolved at runtime, allowing the program to choose the appropriate method based on the actual object type.

Use in Interfaces: Polymorphism is commonly used in Java with interfaces and abstract classes, allowing different classes to be treated as instances of a common interface or superclass.

code reusability
==================================================================================================================================
10)ABSTRACTION
****************
it is a vital concept in OOP that helps manage complexity and improve code quality. By focusing on what an object does rather than how it does it, abstraction allows developers to create systems that are easier to understand, maintain, and extend. Understanding and applying abstraction effectively is crucial for building robust and flexible software applications in Java. If you have any further questions or need clarification, feel fre


Abstraction is one of the core principles of Object-Oriented Programming (OOP) that focuses on exposing only the essential features of an object while hiding the unnecessary details. It allows programmers to work at a higher level of complexity, using a simplified model of a system without needing to understand all the underlying intricacies.

Key Concepts of Abstraction
Hiding Complexity: Abstraction enables the hiding of complex implementation details from the user. The user interacts with an object through a simplified interface without needing to understand the inner workings.

Simplified Interface: By exposing only the relevant attributes and methods, abstraction helps to create a clear and understandable interface for the object, making it easier to use and manage.

Focus on What, Not How: With abstraction, developers focus on what an object does instead of how it does it. This separation of concerns leads to cleaner, more maintainable code.

Types of Abstraction in Java
In Java, abstraction can be achieved through:

Abstract Classes
Interfaces
1. Abstract Classes
An abstract class is a class that cannot be instantiated on its own and may contain abstract methods (methods without a body) that must be implemented by subclasses. Abstract classes can also have concrete methods (methods with a body).

Example of Abstract Class
java

// Abstract class
abstract class Shape {
    // Abstract method
    abstract void draw();

    // Concrete method
    void display() {
        System.out.println("This is a shape.");
    }
}

// Subclass of Shape
class Circle extends Shape {
    @Override
    void draw() {
        System.out.println("Drawing a circle.");
    }
}

// Subclass of Shape
class Rectangle extends Shape {
    @Override
    void draw() {
        System.out.println("Drawing a rectangle.");
    }
}

public class AbstractionExample {
    public static void main(String[] args) {
        Shape circle = new Circle();
        Shape rectangle = new Rectangle();

        circle.draw(); // Output: Drawing a circle.
        rectangle.draw(); // Output: Drawing a rectangle.
        circle.display(); // Output: This is a shape.
    }
}
2. Interfaces
An interface is a reference type in Java that can contain only method signatures and constant declarations. A class that implements an interface must provide implementations for all of its methods. Interfaces are a way to achieve abstraction and support multiple inheritance.

Example of Interface
java

// Interface
interface Animal {
    void sound(); // Abstract method
}

// Class implementing the interface
class Dog implements Animal {
    @Override
    public void sound() {
        System.out.println("Dog barks.");
    }
}

// Class implementing the interface
class Cat implements Animal {
    @Override
    public void sound() {
        System.out.println("Cat meows.");
    }
}

public class InterfaceExample {
    public static void main(String[] args) {
        Animal myDog = new Dog();
        Animal myCat = new Cat();

        myDog.sound(); // Output: Dog barks.
        myCat.sound(); // Output: Cat meows.
    }
}
Advantages of Abstraction
Reduced Complexity: By hiding unnecessary details, abstraction simplifies the complexity of the system for the user.

Improved Code Reusability: Abstract classes and interfaces promote code reuse, allowing developers to implement shared behavior across multiple classes.

Enhanced Maintainability: Changes in the implementation of an abstract class or interface do not affect the classes that use them, making the code easier to maintain and update.

Encourages Separation of Concerns: By defining clear interfaces, abstraction promotes a separation of concerns in design, making it easier to understand and manage large systems.

need to check after java 8 update

===============================================================================================================================================================
11)CONSTRUCTOR
****************
In Java, a constructor is a special type pf method that is called when an object is instantiated.
 It is used to initialize the object and allocate memory for it.
 
Key Characteristics of Constructors
***************************************
Name: A constructor must have the same name as the class in which it is defined.
No Return Type: Constructors do not have a return type, not even void.
Called Automatically: A constructor is called automatically when an object of the class is created.
Overloading: You can have multiple constructors in a class with different parameter lists (constructor overloading).
Default Constructor: If no constructor is defined, Java provides a default constructor that initializes instance variables to default values (e.g., 0, null, false).
Parameterized Constructor: You can define constructors that accept parameters to allow for custom initialization of object attributes.
Types of Constructors
**********************
Default Constructor: A constructor that takes no parameters.
Parameterized Constructor: A constructor that takes one or more parameters.
Examples
1. Default Constructor
************************
A default constructor initializes instance variables to default values.

java

class Car {
    private String model;
    private int year;

    // Default constructor
    public Car() {
        model = "Unknown";
        year = 0;
    }

    public void display() {
        System.out.println("Model: " + model + ", Year: " + year);
    }
}

// Example usage
public class Main {
    public static void main(String[] args) {
        Car car = new Car(); // Calls the default constructor
        car.display(); // Output: Model: Unknown, Year: 0
    }
}
2. Parameterized Constructor
********************************
A parameterized constructor allows you to initialize instance variables with specific values.

java

class Car {
    private String model;
    private int year;

    // Parameterized constructor
    public Car(String model, int year) {
        this.model = model; // Assigning parameter values to instance variables
        this.year = year;
    }

    public void display() {
        System.out.println("Model: " + model + ", Year: " + year);
    }
}

// Example usage
public class Main {
    public static void main(String[] args) {
        Car car = new Car("Toyota Camry", 2021); // Calls the parameterized constructor
        car.display(); // Output: Model: Toyota Camry, Year: 2021
    }
}
Constructor Overloading
**************************8
You can define multiple constructors in the same class with different parameter lists.

java

class Car {
    private String model;
    private int year;

    // Default constructor
    public Car() {
        this.model = "Unknown";
        this.year = 0;
    }

    // Parameterized constructor
    public Car(String model) {
        this.model = model;
        this.year = 2022; // Default year
    }

    // Parameterized constructor
    public Car(String model, int year) {
        this.model = model;
        this.year = year;
    }

    public void display() {
        System.out.println("Model: " + model + ", Year: " + year);
    }
}

// Example usage
public class Main {
    public static void main(String[] args) {
        Car car1 = new Car(); // Calls the default constructor
        Car car2 = new Car("Honda Civic"); // Calls the single-parameter constructor
        Car car3 = new Car("Ford Mustang", 2023); // Calls the two-parameter constructor

        car1.display(); // Output: Model: Unknown, Year: 0
        car2.display(); // Output: Model: Honda Civic, Year: 2022
        car3.display(); // Output: Model: Ford Mustang, Year: 2023
    }
}
Calling Constructors
this keyword: A constructor can call another constructor in the same class using the this keyword.
super keyword: A constructor can call a superclass constructor using the super keyword, typically the first statement in the subclass constructor.
Summary
Constructors: Special methods to initialize objects.
Types: Default constructors and parameterized constructors.
Overloading: Multiple constructors with different parameters.
No Return Type: Constructors do not have a return type and share the class name.
================================================================================================================================
12)A COPY CONSGTRUCTOR 
****************************
it is a special type of constructor used to create a new object as a copy of an existing object
 It is particularly useful in classes where you want to create a new instance with the same properties as another instance,


Characteristics of Copy Constructors
Takes a Parameter: A copy constructor takes an object of the same class as a parameter.
Creates a New Instance: It initializes a new object using the values from the passed object.
Deep Copy vs. Shallow Copy: Depending on the implementation, a copy constructor can perform a shallow copy (copying references) or a deep copy (copying actual object data).
Example of a Copy Constructor
Hereâ€™s an example to illustrate the concept of a copy constructor in Java:

java

class Person {
    private String name;
    private int age;

    // Parameterized constructor
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    // Copy constructor
    public Person(Person other) {
        this.name = other.name; // Copying the name
        this.age = other.age;   // Copying the age
    }

    public void display() {
        System.out.println("Name: " + name + ", Age: " + age);
    }
}

// Example usage
public class Main {
    public static void main(String[] args) {
        Person original = new Person("Alice", 30); // Creating original object
        Person copy = new Person(original); // Creating a copy using the copy constructor

        original.display(); // Output: Name: Alice, Age: 30
        copy.display();     // Output: Name: Alice, Age: 30

        // Modifying the copy
        copy = new Person("Bob", 25); // Reassigning copy to a new instance
        copy.display(); // Output: Name: Bob, Age: 25
    }
}
Shallow Copy vs. Deep Copy
****************************
Shallow Copy:
^^^^^^^^^^^^^^^^
 A shallow copy copies the object's references and initialize  to the new objects. 
If the original object has any changes both the original and the copy will refer to the same object.
 Changes made to that mutable objects through one reference will be visible to the other reference.
//even though we change the value of one referenc will change the other one also
//so we can modify the main reference through copy reference also

Example:


class Address {
    private String city;

    public Address(String city) {
        this.city = city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getCity() {
        return city;
    }
}

class Person {
    private String name;
    private Address address; // Reference to mutable object

    public Person(String name, Address address) {
        this.name = name;
        this.address = address;
    }

    // Shallow copy constructor
    public Person(Person other) {
        this.name = other.name;
        this.address = other.address; // Copying the reference (shallow copy)
    }

    public void display() {
        System.out.println("Name: " + name + ", City: " + address.getCity());
    }
}

public class Main {
    public static void main(String[] args) {
        Address addr = new Address("New York");
        Person original = new Person("Alice", addr);
        Person copy = new Person(original); // not Shallow copy
Person copyobj=original ;//shallow copy
        original.display(); // Output: Name: Alice, City: New York
        copy.display();     // Output: Name: Alice, City: New York

        // Modifying the address through the copy
        copy.address.setCity("Los Angeles");

        original.display(); // Output: Name: Alice, City: Los Angeles (affected by change)
        copy.display();     // Output: Name: Alice, City: Los Angeles
    }
}
Deep Copy:
^^^^^^^^^^^^^^
 A deep copy copies the object and all objects referenced by it, 
creating completely independent objects. 
This means that changes to the mutable objects in one instance will not affect the other.
//so we cant change the main object reference through copy object reference 

Example:

java

class Person {
    private String name;
    private Address address;

    public Person(String name, Address address) {
        this.name = name;
        this.address = address;
    }

    // Deep copy constructor
    public Person(Person other) {
        this.name = other.name;
        this.address = new Address(other.address.getCity()); // Creating a new Address instance (deep copy)
    }

    // Display method as before...
}

// Example usage remains the same...
Summary
Copy Constructor: A constructor used to create a new object as a copy of an existing object.
Parameters: Takes an object of the same class as a parameter.
Shallow vs. Deep Copy: Depending on the implementation, a copy constructor can create a shallow or deep copy of the object.
If you have further questions or need more examples, feel free to ask!

Y this copy constructor?->check
what is the advantage?->check

-----------------------------------------------------------------------------------------------------------------------------
OVERLOADING private methods
***************************
Yes, we can overload private methods in Java but, you can access these from the same class.

Example
 Live Demo

public class Calculator {
   private int addition(int a , int b){
      int result = a+b;
      return result;
   }
   private int addition(int a , int b, int c){
      int result = a+b+c;
      return result;
   }
   public static void main(String args[]){
      Calculator obj = new Calculator();
      System.out.println(obj.addition(12, 13));
      System.out.println(obj.addition(12, 13, 15));
   }
}
Output
=============================================================================
can we overload a static method
*********************************
It is possible to overload a static method in Java, but it is not possible to override a static method.
 Overloading a static method means having multiple methods with the same name but with different parameter lists within the same class
 or subclass.17 Jul 2024
can we overide static methods ?
*******************************
No, static methods in Java cannot be overridden because static methods are associated with the class itself rather than an instance of the class. When a subclass inherits a static method from its parent class, it is not possible to override the behaviour of that static method. 
They cannot be overridden because they do not act on a specific instance of an object. 


OVERRIDING FACTS:
**********************
ollow the below list of rules.  

->Static methods can not be overridden.  
->Final methods can not be overridden.  
->Private methods can not be overridden.  
->A constructor can not be overridden.
->Use the super keyword to invoke the overridden method from the child class. =check?
->The return type of the overriding method must be the same as the parent has it.  
->The access specifier of the overriding method can be changed, but the visibility must increase but not decrease. 
->For example, a protected method in the parent class can be made public, but not private, in the child class. 

->If the overridden method does not throw an exception in the parent class,
 then the child class overriding method can only throw the unchecked exception, 
throwing a checked exception is not allowed.  

->If the parent class overridden method does throw an exception, 
then the child class overriding method can only throw the same or subclass exception,
 or it may not throw any exception.
==============================================================================================================================
Which is better: Overloading or overriding?
***********************************************
Overloading gives better performance compared to overriding. 
The reason is that the binding of overridden methods is being done at runtime.

What are the two types of Overloading and Overriding?
*********************************************************
Overloading and overriding are two types of Polymorphism. 
Method overloading is an example of static polymorphism, 
while method overriding is an example of dynamic polymorphism.

method overloading -static overloading-compile time polymporphysm
method overiding-dynamic overloading-run time polymporphysm

Is it possible to override or overload a static method in Java?
*******************************************************************
It is possible to overload a static method in Java, but it is not possible to override a static method. Overloading a static method means having multiple methods with the same name but with different parameter lists within the same class or subclass. 

Can we Overload Methods that Differ Only by Static Keyword?
****************************************************************
We cannot overload two methods in Java if they differ only by static keyword given the number of parameters and types of parameters is the same.
Code implementation:

public class Main {
public static void fun() {
System.out.println("CodingNinjas");
}
public static void fun() {
System.out.println("CodingNinjas(");
}
public static void main(String args[])
{
Main.fun();
}
}
You can also try this code with Online Java Compiler
Run Code
Output:

Main.java:6: error: method fun() is already defined in class Main


============================================================================================================================

method overloading with both static and nonstatic?
Static blocks.
Static Nested classes.
Kotlin and static.


======================================================================================================================================
can we create a constructor as static?
******************************************
In the case of a constructor, a constructor is a reusable block of code
, which means we can call it from its subclasses during the===========" creation of the objects"==================
. But, when we declare it as static, it can not be used by its subclasses other than the declaring classes. 
So, it is illegal to declare a constructor as static.
=====================================================================================================
can we extebd one constructor from  another constructor?


13)final keyword
***************
https://www.geeksforgeeks.org/final-keyword-in-java/
============================================================================================================

14)INTERFACE
************
Uses of Interfaces in Java are mentioned below:
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

->It is used to achieve total abstraction.
->Since java does not support multiple inheritances in the case of class, by using an interface it can achieve multiple inheritances.
->Any class can extend only 1 class, but can any class implement an infinite number of interfaces.
->It is also used to achieve loose coupling.
->Interfaces are used to implement abstraction. 

->So, the question arises why use interfaces when we have abstract classes?

The reason is, abstract classes may contain non-final variables, whereas variables in the interface are final, public, and static. and methods are abstract by default
only public, private, abstract, default, static and strictfp are permitted  except protected

y?except protected?-> If you want to use protected methods you are probably better off using an abstract class.6 Oct 2014

->interface can only be public by default

//defaultt ans static cant be used together
=======================================================================================================================
Can an interface have non-static methods in Java?
An interface can declare static methods, which are invoked without reference to a particular object. 
Static interface methods are distinct from default methods, abstract interface methods, and non-static private interface methods, all of which are instance methods.26 Jan 2024
=========================================================================================================================
15)Usage of Java THIS keyword
****************************
Here is given the 6 usage of java this keyword.

this can be used to refer current class instance variable.
this can be used to invoke current class method (implicitly)
this() can be used to invoke current class constructor.
this can be passed as an argument in the method call.
this can be passed as argument in the constructor call.
this can be used to return the current class instance from the method.
=============================================================================================================================
16)CONSTRUCTOR CHAINING
******************

In constructor chain, a constructor is called from another constructor in the same class this process is known as constructor chaining. 
It occurs through inheritance. When we create an instance of a derived class, all the constructors of the inherited class (base class) are first invoked, 
after that the constructor of the calling class (derived class) is invoked.

Rules of Constructor Chaining
*******************************
An expression that uses this keyword must be the first line of the constructor.
Order does not matter in constructor chaining.
There must exist at least one constructor that does not use this
Constructor Calling form another Constructor
The calling of the constructor can be done in two ways:

By using this() keyword: It is used when we want to call the current class constructor within the same class.
By using super() keyword: It is used when we want to call the superclass constructor from the base class.
Note: In the same constructor super() and this() cant be used simultaneuously


__________________________________________________________________________________________________________________________________________________________________
converting the object to bystream and vice versa
Why We Use Serialization?

exLmarshalling and unmarshalling
Persistence:

Serialization allows you to save the state of an object to a file or database. When you need to retrieve the object later, you can deserialize it back into its original state.
Communication:

In distributed systems or client-server applications, objects often need to be sent over a network. Serialization enables this by converting objects into a format that can be easily transmitted.
Deep Copy:

Serialization can be used to create deep copies of objects. By serializing and then deserializing an object, you create a new instance that is independent of the original.
Caching:

You can serialize objects to store them in cache for faster access in future operations, reducing the need to recreate complex objects.


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

String Builder/String BUffer
*******************************

to store  a string 4 ways
'1)String s="welcme";
String s=new String("welcome");

StrungBuffer strbyff=new StringBuffer("welcme");
StrungBuilder strbilfff=new StringBuilder("welcome");

string immutable-->
string buffer and string builder is mutable




