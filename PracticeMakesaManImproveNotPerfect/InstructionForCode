1)Access Specifier:-
********************
Public
*******
 ->if it is static return /void type from same class/differentclass/class from diffrent package we can directly access through className.methodname();
 ->if it is nonstatic return/void type from same class/ different class/different class from other package we can create am obj for that particular class
->if it is a static return /void type from subclass (same paclage/diff package) we can access through classname.methodname
->if it is a nonstatic return/void type from subclass(same package/differe packlage) we can dorectly access both parent class methods and suclass methods 
using child class object only.

summary:The `public` modifier allows elements to be accessible from any other class in the application, regardless of the package. 

protected
**********
summary:The protected access specifier in Java allows members to be accessed within the same class, subclasses, and classes in the same package.

defaults-package private
***********
->if it is static return /void type from same class/differentclass we can directly access through className.methodname();
 ->if it is nonstatic return/void type from same class/ different class we can create am obj for that particular class
->if it is a static return /void type from subclass (same package) we can access through classname.methodname
->if it is a nonstatic return/void type from subclass(same package) we can dorectly access both parent class methods and suclass methods 

summary:The `default`access specifier in Java allows members to be accessed within the same class, subclasses, and classes in the same package.

2)copyConstrucrtor:-
************************

creating one normal constructor and also one more copy constructor and passing a constructor name and obj as parameter in this copy constructor.

3)method hiding in inheritance
********************************

if we crete obj for child class only static methods of child is visibile
child cjhilobj=new child();

'even though we upcast as it it only reference of parents still we will get parent methood only visibilt not the child method
but in upcasting if it is non static method then by upcasting also ,child method is visible

so making the method static in bpth parent and child class we can hide the child methods and achive method hiding

how will you hide the parent method?

4)inheritance
********************

through [parent obj only parent methods are visible
through child all methods are visible
if we create a reference and pass child obj or

if we upcast to child,depends on the static/no static explained above we can get the child or parent methods visible
static->parent method is visible
non static->child method is visible

ex:

   //passing the child referencde
	   MainCladssInheritance refernce=childobj; 
	   refernce.commons();//as it is non static child is visible
   //upcasting
	   MainCladssInheritance upcastobj=new SingleInheritanceExample(); 
	   upcastobj.commons();//as it is non static method child is visible
	   
//	   SingleInheritanceExample childobj1=parentobj;//not possible
	   
	   refernce.commonsstatic();//parent is comming as static 
	   
	   upcastobj.commonsstatic();//parnet is comming as it is static
	   
5)method overloading
***********************	   

no need to declare varable we can directlt create a overloading methods and do the implemenetation
it varies according to the parameters
as it is method we can have public,protected and default methods not private if we are calling from different class

as it this method it can be public,prptected,default an dprivate and static and nonstatic as well

6)method overrding
******************
->Static methods can not be overridden.  
makingit static can be used to hhide the child class implementation mentioned above
Y?->static methods are not associated with the instance of a class, but with the class itself.
 Therefore,if subclass overides it subclass need to created object and static is not instance level doesnot make sense 
it cannot modify the behavior of the static method in any way.22 Mar 2023
->Final methods can not be overridden.  
->Private methods can not be overridden.  
->A constructor can not be overridden.
->Use the super keyword to invoke the overridden method from the child class. 

7)construcytor 
*****************************
->declare varables ,use this.keyword to make te construct differntiat the parametrs and declaredavrables
then overload

->we can overide a method inside the constructor
->but we cant overide the constructor
->as it this comstructor it can be public,protected,default and private
but cant be abstract (as it is not a clss).cant be final,cant be synchronised
but cant be static(as it is not a compiletime way,constructor will be called in the runtime at the time when instance are created)
-> so when we declare it as static, it can not be used by its subclass So, it is illegal to declare a constructor as static.
->"if any method inside the constructor is private you cant extend that classs by any other child class"
->In the case of a constructor, a constructor is a reusable block of code
which means we can call it from its subclasses during the" creation of the objects"
->we can achive constructor overloading in object level
->we can achieve constryctor chaining also
->We can achieve constructor chaining in two ways:
Within the same class: If the constructors belong to the same class, we use" this"
From the base class: If the constructor belongs to different classes (parent and child classes),
 we use the super keyword to call the constructor from the base class.
->constructor wont have return type

8)ABstract class
*****************
absract class->abstarct key word must
->it can have abstract and default methods
->It cannt be instantiated
->It can have final methods(cant override),contructor and static methods also
->but i cant have final variables declared need to init must
->The subclass of abstract class in java must implement all the abstract methods "unless the subclass is also an abstract class"
->Abstract methods cannot have private access.it doesnot make sense bcz abstract class cant be instantiated and by instantiating child class of abstract class also 
private method is wont be visible 

9)interface:
************
->interface can have only abstract method befor java8
->only public, private, abstract, default, static and strictfp are permitted-in generall
"except protected" Y?->check
->and all above  method should have body except public and abstract
->multiple inheritance is possible no confusion in parent bcz parent have avstracr methods
-> From Java 8, interfaces can contain default and static method implementations.
->From Java 9, interfaces can also contain private method implementations.
->we can extend first and implement next same time in by one class(the class which we are extending can have public ,protected,static,non static ,
but not privates makes sense until that class has main mehod and we are trying to implement)
->interface to interface extends also posible

10)Super vs super()-super class level
**********************
->super is a  or keyword which can be used to call a super class varaibles and methods fro child class/constructor
ex:super.variable;  ex:super.methodname();

->super() is a statement/constrcutor call we can call the super constructor from the child condtructor
->this should be in the firts line of the child constructor 
->not in method level
->we can call any methods and varibles except private (it doessnot make sense from subsclass)
->if you have a parmeteroised or zero parmeterise construcor youbhave to call it by cpnstructor obj only 
like ->constructorobj.methodinconstructor();(method which prints it)or using super statment in subclass
it wont print by child obj ->calling childobj.methodinConstructor();(method which prints it)->wont work in this case of subclass

11)this vc this()-6 ways-within the class level
******************
Constructorlevel-3 ways
^^^^^^^^^^^^^^^
->this keyword is use to differentiate the  local variable and instance variable.(constructorblevel)
->If local variables(formal arguments) and instance variables are completely different, 
there is no need to use this keyword.
->to invoke current class constructor->costructor call from another constryctor shuld be om the forst line of the constructor
->//recursive constructor invocation is not possible
We can pass the "this" keyword in the constructor also. It is useful if we have to use one object in multiple classes.

classlevel-3 ways
^^^^^^^^^^^
-> we can use this to invoke current class method  ex:this.methodname();->can be any line in the method
->The "this" keyword can also be passed as an argument in the method. It is mainly used in the event handling.
->his keyword can be used to return current class instance . In such case, return type of the method must be the class type (non-primitive).. In such case, return type of the method 
must be the class type (non-primitive).
Syntax of this that can be returned as a statement
return_type method_name(){  
return this;  
}  