1)Access Specifier:-done
********************
Public
*******
 ->if it is static return void type from same classdifferentclassclass from diffrent package we can directly access through className.methodname();
 ->if it is nonstatic returnvoid type from same class different classdifferent class from other package we can create am obj for that particular class
->if it is a static return void type from subclass (same paclagediff package) we can access through classname.methodname
->if it is a nonstatic returnvoid type from subclass(same packagediffere packlage) we can dorectly access both parent class methods and suclass methods 
using child class object only.

summary:The `public` modifier allows elements to be accessible from any other class in the application, regardless of the package. 

protected-doubt
**********
 ->if it is static return void type from same classdifferentclasswe can directly access through className.methodname();
 ->if it is nonstatic returnvoid type from same class different class we can create am obj for that particular class
->if it is a static return void type from subclass (same paclagediff package) we can access through classname.methodname
->if it is a nonstatic returnvoid type from subclass(same packagediffere packlage) we can dorectly access both parent class methods and suclass methods 
summary:The protected access specifier in Java allows members to be accessed within the same class, subclasses, and classes in the same package.

defaults-package private
***********
->if it is static return void type from same classdifferentclass we can directly access through className.methodname();
 ->if it is nonstatic returnvoid type from same class different class we can create am obj for that particular class
->if it is a static return void type from subclass (same package) we can access through classname.methodname
->if it is a nonstatic returnvoid type from subclass(same package) we can dorectly access both parent class methods and suclass methods 

summary:The `default`access specifier in Java allows members to be accessed within the same class, subclasses, and classes in the same package.
__________________________________________________________________________________________________________________________________________________________________________________________________________________

2)copyConstrucrtor:-check about this
************************

creating one normal constructor and also one more copy constructor and passing a constructor name and obj as parameter in this copy constructor.
->shallow copy
->deep copy

constrcutor level -doubt 

__________________________________________________________________________________________________________________________________________________________________________________________________________________

3)method hiding in inheritance
********************************

if we crete obj for child class only static methods of child is visibile
child cjhilobj=new child();

'even though we upcast as it it only reference of parents still we will get parent methood only visibilt not the child method
but in upcasting if it is non static method then by upcasting also ,child method is visible

so making the method static in bpth parent and child class we can hide the child methods and achive method hiding

how will you hide the parent method?
__________________________________________________________________________________________________________________________________________________________________________________________________________________

4)inheritance-done
********************

through parent obj-> only parent methods are visible
through child all methods are visible
if we create a reference and pass child obj reference
->basically  by child class all the method from parent is visible but making it static: achieving metong method hiding
metpod hiding:->
printing childobj.staticmethod is printing child static so hiding parent


if we upcast to child,depends on the staticno static explained above we can get the child or parent methods visible

->basically Upcasting only allow acces to parent method unlesss we override non static,anyways static cant be overided thats why
static->parent method is visible
non static->child method is visible
ex:

   passing the child referencde created as object(also upcasting only)
	   MainCladssInheritance refernce=childobj; 
	   refernce.commons();as it is non static child is visible
    refernce.commonsstatic();parent is comming as static 
	   
   upcasting
   
	   MainCladssInheritance upcastobj=new SingleInheritanceExample(); 
	   upcastobj.commons();as it is non static method child is visible
	   
	   SingleInheritanceExample childobj1=parentobj;not possible
	   
	  
	   upcastobj.commonsstatic();parnet is comming as it is static
	   
Summary:
->f you call parent parentobj=new parent()->only pareny method is visible
->if ypu call child childobj=new Child()->all parent method and child are visble ,
in the above case if you want to hide the parent method create the same method in child and make both static
now child method is visible and child will hide the parent method

->when ypu do upcast,Parent parentref=new Child();->upcasting will give only pareny method 
but this time if it is non static overided method child will be visible 
and if it is static overided method parent only visible (hides the child method)

summary for code:overriding inheritance
#)scenario 1
parentclass parentobj=new Parentclass()
Parentobj.instancemethod->Instance method in Parent class.
Parentobj.staticmethod-> Static method in Parent class.

Childclass childobj=new childclass()

childobj.instancemethod->Instance method in Child class.
childobj.staticemethod->->Static method in child class.(method hiding)
childobj.notoveridedStaticmethod->static methid in 

ParenClass ref=new Childclass();

ref.instancemethod->Instance method in Child class.
ref.staticmethod  ->Static method in Parent class.
__________________________________________________________________________________________________________________________________________________________________________________________________________________
	   
5)method overloading
***********************	   

no need to declare varable we can directlt create a overloading methods and do the implemenetation
it varies according to the parameters
as it is method we can have public,protected and default methods not private if we are calling from different class

as it this method it can be public,prptected,default an dprivate and static and nonstatic as well
__________________________________________________________________________________________________________________________________________________________________________________________________________________

6)method overrding
******************
->Static methods can not be overridden.  
making it static can be used to hhide the child class implementation mentioned above
Y?->static methods are not associated with the instance of a class, but with the class itself.
 Therefore,if subclass overides it subclass need to created object and static is not instance level doesnot make sense 
it cannot modify the behavior of the static method in any way.22 Mar 2023
->Final methods can not be overridden.  
->Private methods can not be overridden.  
->A constructor can not be overridden.
->Use the super keyword to invoke the overridden method from the child class. 
__________________________________________________________________________________________________________________________________________________________________________________________________________________

7)constructor ->done private doubt
*****************************
->declare varables ,use this.keyword to make te construct differntiat the parametrs and declaredavrables
then overload

->we can overide a method inside the constructorclass
->but we cant overide the constructor
->as it this comstructor it can be public,protected,default but not private
but cant be abstract (as it is not a abstrctclss).cant be final,cant be synchronised
[ cant be static(as it is not a compiletime way,constructor will be called in the runtime at the time when instance are created)
 so when we declare it as static, it can not be used by its subclass So, it is illegal to declare a constructor as static.
[cant be final y ->One of the important property of java constructor is that it can not be final. As we know, constructors are not inherited in java. Therefore, constructors are not subject to hiding or overriding. When there is no chance of constructor overriding, there is no chance of modification also. When there is no chance of modification, then no sense of restricting modification there. 

->doubt ->"if any method inside the constructor is private you cant extend that classs by any other child class"
->In the case of a constructor, a constructor is a reusable block of code
which means we can call it from its subclasses during the" creation of the objects"
->we can achive constructor overloading in object level
->we can achieve constryctor chaining also
->We can achieve constructor chaining in two ways:
Within the same class: If the constructors belong to the same class, we use" this"
From the base class: If the constructor belongs to different classes (parent and child classes),
 we use the super keyword to call the constructor from the base class.
->constructor wont have return type
__________________________________________________________________________________________________________________________________________________________________________________________________________________

8)ABstract class--done -doubt in final variable
*****************
absract class->abstarct key word must
->it can have abstract and default methods
->It cannt be instantiated
->but It can have all methods-> final methods(cant override),non static and static methods ,private methods(only static) also->if same class,prottected also
y constructor ->first of all absrtrct class is a "class" we can have instance(non static) variable, and non-abstract(nonstatic) methods. 
->construtor calling is possible only by method chaining (super())as it is inside absract class,we can overload constructor also
->doubt->but it can have final variables declared in the constructor class and we can init also in the constructor 
->The subclass of abstract class in java must implement all the abstract methods "unless the subclass is also an abstract class"
->Abstract methods cannot be private .it doesnot make sense bcz abstract class cant be instantiated and by instantiating child class of abstract class also 
private method is wont be visible 
__________________________________________________________________________________________________________________________________________________________________________________________________________________

9)interface:-done
************
->cantv= instantiate
->interface can have only abstract method befor java8
->only public, private, abstract, default, static and strictfp are permitted-in generall
"except protected" Y?->check
->and all above  method should have body except public and abstract
->multiple inheritance is possible no confusion in parent bcz parent have avstracr methods
-> From Java 8, interfaces can contain default and static method implementations.
->From Java 9, interfaces can also contain private method implementations.
->we can extend first and implement next same time in by one class(the class which we are extending can have public ,protected,static,non static ,
but not privates makes sense until that class has main mehod and we are trying to implement)
->interface to interface extends also posible
__________________________________________________________________________________________________________________________________________________________________________________________________________________

10)Super vs super()-super class level
**********************
->super is a  or keyword which can be used to call a super class varaibles and methods fro child classconstructor
ex:super.variable;  ex:super.methodname();

->super() is a statementconstrcutor call we can call the super constructor from the child condtructor
->this should be in the firts line of the child constructor 
->not in method level
->we can call any methods and varibles except private (it doessnot make sense from subsclass)
->if you have a parmeteroised or zero parmeterise construcor youbhave to call it by cpnstructor obj only 
like ->constructorobj.methodinconstructor();(method which prints it)or using super statment in subclass
it wont print by child obj ->calling childobj.methodinConstructor();(method which prints it)->wont work in this case of subclass
__________________________________________________________________________________________________________________________________________________________________________________________________________________

11)this vc this()-6 ways-within the class level-doubt inn 6th point
******************
Constructorlevel-3 ways
^^^^^^^^^^^^^^^
->this keyword is use to differentiate the  local variable and instance variable.(constructorblevel)
->If local variables(formal arguments) and instance variables are completely different, 
there is no need to use this keyword.
->to invoke current class constructor->costructor call from another constryctor shuld be om the forst line of the constructor
->recursive constructor invocation is not possible
We can pass the "this" keyword in the constructor also.
 It is useful if we have to use one object in multiple classes.

classlevel-3 ways
^^^^^^^^^^^
-> we can use this to invoke current class method  ex:this.methodname();->can be any line in the method
->The "this" keyword can also be passed as an argument in the method. It is mainly used in the event handling.
->his keyword can be used to return current class instance . In such case, return type of the method must be the class type (non-primitive).. In such case, return type of the method 
must be the class type (non-primitive).
Syntax of this that can be returned as a statement
return_type method_name(){  
return this;  
__________________________________________________________________________________________________________________________________________________________________________________________________________________

12)encapsulation->
*******************
->binding data member and function members togetherwrapping it together in to single unit
->e can create a fully encapsulated class in Java by making all the data members of the class private.
 Now we can use setter and getter methods to set and get the data in it.
 ->by doing this we can[ achieve data hiding,control over the data,easy to test(bettr for unit testing)
 Data Hiding and controll over the data:
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
It just provides a way to protect your data from the outside world. What it means is,
lets say if I made my instance variable public, then anyone can change its state. 
But if we make our instance variable privateprotected then actually we are restricting 
outside entities from making changes to it.
 ->when we give only setter method it become write only class
 ->when we give only getter method it becomes read only
}  
__________________________________________________________________________________________________
13COMPARATOR and COMPARABLE:
############################
Comparator(I)
*************
           ->comparator is like if you want to specify on which logic you want to sort elements  ( custom sorting )+
           ->we have compare method in this interface
Collection wise:
^^^^^^^^^^^^^^^^^
 
if it accept Collections.sort->Collections.sort(collectionclass,Comparator);
if not->covert that collection to the collection which accepts Collections.sort and implemet that same

Class Wise
*********** 
you can use comparator to specify your ownlogic 
Ex:
System.out.println("printing after sorting");
		Comparator<Person> CustomComparator=new Comparator<Person>() {

			@Override
			public int compare(Person o1, Person o2) {
				if(o1.age>o2.age) {
					return 1;
				}else {
					return -1;
				}
			}
			
		};
		Collections.sort(personList,CustomComparator);
		
Comparable(I)
*************
         ->if you want to give a power to class itself to compare the object
         ->you can implement Comparable and overide the compareTo method and write the logic
         
Collection wise:
^^^^^^^^^^^^^^^^^
as String class and Integer class implemnts this comparable interface no  need to use this in collection you can directly use 
Collection.sort();

Class Wise
*********** 
 if you want to give a power to class itself to compare the object
  you can implement Comparable and overide the compareTo method and write the logic
 

__________________________________________________________________________________________________

14)Type casting 
upcasting->converting the value from smaller to larger
downcasting->coverting the value from smaller to larger

    upcasting->lowyer to higher->automatic prpcess
	 Ex:
	int-->long
	float-->double
	
	downcasting->higher to lowyer-manual process
	 Ex:
	long--.>int
	double--->float
	
__________________________________________________________________________________________________

How to achieve method hiding in Java?
Method hiding may happen in any hierarchy structure in java. When a child class defines a static method with the same signature as a static method in the parent class, then the child's method hides the one in the parent class.17 Mar 2024
__________________________________________________________________________________________________
pass by value and reference-doubt